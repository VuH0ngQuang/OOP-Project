Index: src/Entity/Entity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Entity;\n\nimport GamePanel.MyPanel;\nimport UtilityTool.UtilityTool;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Random;\n\npublic class Entity {\n     public int worldX, worldY, speed, height, width, spriteNum = 1, spriteCounter = 0;\n     private BufferedImage up1, up2, down1, down2, left1, left2, right1, right2;\n     public BufferedImage attackUp1, attackUp2, attackDown1, attackDown2, attackDown3, attackDown4, attackLeft1, attackLeft2, attackLeft3, attackLeft4, attackRight1, attackRight2, attackRight3, attackRight4;\n     private String direction;\n     public Rectangle solidArea;\n     public Rectangle attackArea = new Rectangle(0, 0, 0, 0);\n     public int solidAreaDefaultX, solidAreaDefaultY, actionLockCounter;\n     public boolean collisionOn = false;\n     public boolean invincible = false;\n     public boolean alive = true;\n     public boolean dying = false;\n     boolean attacking = false;\n     public int invincibleCounter = 0;\n     int dyingCounter = 0;\n     public int type; // 0 = player 1 = enemy\n     public boolean onPath = false;\n\n     public int getXdistance (Entity target){\n          int xDistance = Math.abs(worldX - target.worldX);\n          return xDistance;\n     }\n\n     public int getYdistance (Entity target){\n          int yDistance = Math.abs(worldY - target.worldY);\n          return yDistance;\n     }\n\n     public int getTileDistance (Entity target){\n          int tileDistance = (getXdistance(target) + getYdistance(target)/ mp.tileSize);\n          return tileDistance;\n     }\n\n     public int getGoalCol(Entity target){\n          int goalCol = (target.worldX + target.solidArea.x)/mp.tileSize;\n          return goalCol;\n     }\n\n     public int getGoalRow(Entity target){\n          int goalRow = (target.worldY + target.solidArea.y)/mp.tileSize;\n          return goalRow;\n     }\n\n\n     public BufferedImage setup (String pathImage) {\n          UtilityTool utilityTool = new UtilityTool();\n          BufferedImage image = null;\n          try {\n//               System.out.println(pathImage);\n               image = ImageIO.read(getClass().getResourceAsStream(pathImage));\n               image = utilityTool.scaleImage(image, 48, 48);\n          } catch (IOException e) {\n               e.printStackTrace();\n          }\n          return image;\n     }\n     public Entity(int x, int y, int speed, int height, int width) {\n          this.worldX = x;\n          this.worldY = y;\n          this.speed = speed;\n          this.width = width;\n          this.height = height;\n     }\n\n     public void checkCollision(){\n          collisionOn = false;\n          mp.collisionChecker.checkTile(this);\n          mp.collisionChecker.checkObject(this, false);\n          mp.collisionChecker.checkEntity(this, mp.enemy);\n          boolean contactPlayer = mp.collisionChecker.checkPlayer(this);\n     }\n\n     public void draw(Graphics2D g2){\n          BufferedImage image = null;\n          int screenX = worldX - mp.player.get_worldX() + mp.player.getScreenX();\n          int screenY = worldY - mp.player.get_worldY() + mp.player.getScreenY();\n          if (worldX > mp.player.get_worldX() - mp.player.screenX &&\n                  worldX < mp.player.get_worldX() + mp.player.screenX &&\n                  worldY > mp.player.get_worldY() - mp.player.screenY &&\n                  worldY < mp.player.get_worldY() + mp.player.screenY){\n               switch (get_direction()) {\n                    case \"up\":\n                         if (get_spriteNum() == 1) {\n                              image = get_up1();\n                         }\n                         if (get_spriteNum() == 2) {\n                              image = get_up2();\n                         }\n                         break;\n\n                    case \"down\":\n                         if (get_spriteNum() == 1) {\n                              image = get_down1();\n                         }\n                         if (get_spriteNum() == 2) {\n                              image = get_down2();\n                         }\n                         break;\n\n                    case \"left\":\n                         if (get_spriteNum() == 1) {\n                              image = get_left1();\n                         }\n                         if (get_spriteNum() == 2) {\n                              image = get_left2();\n                         }\n                         break;\n\n                    case \"right\":\n                         if (get_spriteNum() == 1) {\n                              image = get_right1();\n                         }\n                         if (get_spriteNum() == 2) {\n                              image = get_right2();\n                         }\n                         break;\n\n                    // case \"stand\":\n                    // image = get_down1();\n                    // break;\n\n                    default:\n                         break;\n               }\n               if (invincible == true) {\n                    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.4f));\n               }\n               if(dying == true){\n                    dyingAnimation(g2);\n                    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.4f));\n               }\n               g2.drawImage(image, screenX, screenY, mp.getOriginalTileSize() * 3,  mp.getOriginalTileSize() * 3, null);\n\n               g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));\n          }\n     }\n     public void dyingAnimation(Graphics2D g2){\n          dyingCounter++;\n          if(dyingCounter <= 5){changeAlpha(g2, 0f);}\n          if(dyingCounter > 5 && dyingCounter <= 10){changeAlpha(g2, 1f);}\n          if(dyingCounter > 10 && dyingCounter <= 15){changeAlpha(g2, 0f);}\n          if(dyingCounter > 15 && dyingCounter <= 20){changeAlpha(g2, 1f);}\n          if(dyingCounter > 20 && dyingCounter <= 25){changeAlpha(g2, 0f);}\n          if(dyingCounter > 25 && dyingCounter <= 30){changeAlpha(g2, 1f);}\n          if(dyingCounter > 30 && dyingCounter <= 35){changeAlpha(g2, 0f);}\n          if(dyingCounter > 35 && dyingCounter <= 40){changeAlpha(g2, 1f);}\n          if(dyingCounter > 40){\n               dying = false;\n               alive = false;\n          }\n     }\n     public void changeAlpha(Graphics2D g2, float alphaValue){\n          g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alphaValue));\n     }\n     public void setAction(){};\n     public void update(){\n          checkCollision();\n          setAction();\n          collisionOn = false;\n          mp.collisionChecker.checkEntity(this, mp.enemy);\n          boolean contactPlayer = mp.collisionChecker.checkPlayer(this);\n          if (this.type == 1 && contactPlayer){\n               if (mp.player.invincible == false){\n                    mp.player.life--;\n                    mp.player.invincible = true;\n               }\n          }\n          if (get_direction() != null) {\n               mp.collisionChecker.checkTile(this);\n               // IF COLLISION IS FALSE, ENEMY CAN MOVE\n//               System.out.println(collisionOn);\n               if (collisionOn == false) {\n                    switch (get_direction()) {\n                         case \"up\":\n                              set_worldY(get_worldY() - get_speed());\n                              break;\n                         case \"down\":\n                              set_worldY(get_worldY() + get_speed());\n                              break;\n                         case \"left\":\n                              set_worldX(get_worldX() - get_speed());\n                              break;\n                         case \"right\":\n                              set_worldX(get_worldX() + get_speed());\n                              break;\n                         // case \"stand\":\n                         // break;\n                    }\n               }\n               if (invincible == true ){\n                    invincibleCounter++;\n                    if(invincibleCounter > 40){\n                         invincible = false;\n                         invincibleCounter = 0;\n                    }\n               }\n          }\n          // Changes the displayed image every 12 frames\n          set_spriteCounter(get_spriteCounter() + 1);\n          if (get_spriteCounter() > 12) {\n               if (get_spriteNum() == 1) {\n                    set_spriteNum(2);\n               } else if (get_spriteNum() == 2) {\n                    set_spriteNum(1);\n               }\n               set_spriteCounter(0);\n          }\n     }\n\n     public void checkStartChasingOrNot(Entity target, int distance, int rate){\n          if(getTileDistance(target) < distance){\n               int i = new Random().nextInt(rate);\n               if(i == 0){\n                    onPath = true;\n               }\n          }\n     }\n\n     public void checkStopChasingOrNot(Entity target, int distance, int rate){\n          if(getTileDistance(target) > distance){\n               int i = new Random().nextInt(rate);\n               if(i == 0){\n                    onPath = false;\n               }\n          }\n     }\n\n     public void getRandomDirection(){\n          actionLockCounter++;\n          if (actionLockCounter == 120) {\n//            System.out.println(\"actionLockCounter: \" + actionLockCounter); // Debug print statement\n               Random random = new Random();\n               int i = random.nextInt(100) + 1;\n               if (i <= 25) {\n                    set_direction(\"up\");\n               } else if (i <= 50) {\n                    set_direction(\"down\");\n               } else if (i <= 75) {\n                    set_direction(\"left\");\n               } else {\n                    set_direction(\"right\");\n               }\n//            System.out.println(\"Direction set to: \" + get_direction()); // Debug print statement\n               actionLockCounter = 0;\n          }\n     }\n\n     public void checkAttackOrNot(int rate, int straight, int hilizontal) {\n          boolean targetInrange = false;\n          int xDis = getXdistance(mp.player);\n          int yDis = getYdistance(mp.player);\n\n          switch (direction) {\n               case \"up\":\n                    if (mp.player.worldY < worldY && yDis < straight && xDis < hilizontal){\n                         targetInrange = true;\n                    }\n                    break;\n                    case \"down\":\n                         if (mp.player.worldY > worldY && yDis < straight && xDis < hilizontal){\n                              targetInrange = true;\n                         }\n                         break;\n                         case \"left\":\n                              if (mp.player.worldX < worldX && xDis < straight && yDis < hilizontal){\n                                   targetInrange = true;\n                              }\n                              break;\n                              case \"right\":\n                                   if (mp.player.worldX > worldX && xDis < straight && yDis < hilizontal){\n                                        targetInrange = true;\n                                   }\n                                   break;\n          }\n     }\n\n     public void searchPath(int goalCol, int goalRow){}\n\n     MyPanel mp;\n     public Entity(MyPanel mp){\n          this.mp = mp;\n     }\n     public String name;\n     //CHARACTER STATUS\n     public int maxLife;\n     public int life;\n\n     // set and get\n     public void set_worldX(int x) { this.worldX = x; }\n\n     public int get_worldX() {\n          return worldX;\n     }\n\n     public void set_worldY(int y) {\n          this.worldY = y;\n     }\n\n     public int get_worldY() {\n          return worldY;\n     }\n\n     public void set_speed(int speed) {\n          this.speed = speed;\n     }\n\n     public int get_speed() {\n          return speed;\n     }\n\n     public void set_height(int height) {\n          this.height = height;\n     }\n\n     public int get_height() {\n          return height;\n     }\n\n     public void set_width(int width) {\n          this.width = width;\n     }\n\n     public int get_width() {\n          return width;\n     }\n\n     public void set_direction(String direction) {\n          this.direction = direction;\n     }\n\n     public String get_direction() {\n          return direction;\n     }\n\n     public void set_up1(BufferedImage up1) {\n          this.up1 = up1;\n     }\n\n     public BufferedImage get_up1() {\n          return up1;\n     }\n\n     public void set_up2(BufferedImage up2) {\n          this.up2 = up2;\n     }\n\n     public BufferedImage get_up2() {\n          return up2;\n     }\n\n     public void set_down1(BufferedImage down1) {\n          this.down1 = down1;\n     }\n\n     public BufferedImage get_down1() {\n          return down1;\n     }\n\n     public void set_down2(BufferedImage down2) {\n          this.down2 = down2;\n     }\n\n     public BufferedImage get_down2() {\n          return down2;\n     }\n\n     public void set_left1(BufferedImage left1) {\n          this.left1 = left1;\n     }\n\n     public BufferedImage get_left1() {\n          return left1;\n     }\n\n     public void set_left2(BufferedImage left2) {\n          this.left2 = left2;\n     }\n\n     public BufferedImage get_left2() {\n          return left2;\n     }\n\n     public void set_right1(BufferedImage right1) {\n          this.right1 = right1;\n     }\n\n     public BufferedImage get_right1() {\n          return right1;\n     }\n\n     public void set_right2(BufferedImage right2) {\n          this.right2 = right2;\n     }\n\n     public BufferedImage get_right2() {\n          return right2;\n     }\n\n     public void set_spriteNum(int spriteNum) {\n          this.spriteNum = spriteNum;\n     }\n\n     public int get_spriteNum() {\n          return spriteNum;\n     }\n\n     public void set_spriteCounter(int spriteCounter) {\n          this.spriteCounter = spriteCounter;\n     }\n\n     public int get_spriteCounter() {\n          return spriteCounter;\n     }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Entity/Entity.java b/src/Entity/Entity.java
--- a/src/Entity/Entity.java	
+++ b/src/Entity/Entity.java	
@@ -38,7 +38,7 @@
      }
 
      public int getTileDistance (Entity target){
-          int tileDistance = (getXdistance(target) + getYdistance(target)/ mp.tileSize);
+          int tileDistance = (getXdistance(target) + getYdistance(target));
           return tileDistance;
      }
 
@@ -236,25 +236,7 @@
           }
      }
 
-     public void getRandomDirection(){
-          actionLockCounter++;
-          if (actionLockCounter == 120) {
-//            System.out.println("actionLockCounter: " + actionLockCounter); // Debug print statement
-               Random random = new Random();
-               int i = random.nextInt(100) + 1;
-               if (i <= 25) {
-                    set_direction("up");
-               } else if (i <= 50) {
-                    set_direction("down");
-               } else if (i <= 75) {
-                    set_direction("left");
-               } else {
-                    set_direction("right");
-               }
-//            System.out.println("Direction set to: " + get_direction()); // Debug print statement
-               actionLockCounter = 0;
-          }
-     }
+     public void getRandomDirection(){}
 
      public void checkAttackOrNot(int rate, int straight, int hilizontal) {
           boolean targetInrange = false;
