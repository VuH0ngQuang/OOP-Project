Index: src/GamePanel/UI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GamePanel;\n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.text.DecimalFormat;\n\nimport Object.*;\n\npublic class UI {\n    MyPanel gp;\n    Graphics2D g2;\n    Font maruMonica, purisaB, arial_24;\n    BufferedImage heart_full, heart_half, heart_empty;\n    public String currentDialogue = \"\";\n    public int commandNum = 0;\n    public OBJ_Key Obj_key;\n\n    // set up String massage\n    public boolean messageOn = false;\n    public String message = \"\";\n    int messageCounter = 0;\n\n    // finish\n    public boolean gameFinished = false;\n\n    // count time\n    double playTime;\n    DecimalFormat dFormat = new DecimalFormat(\"#0.00\");\n\n    public UI(MyPanel gp) {\n        this.gp = gp;\n\n        try {\n            InputStream is = getClass().getResourceAsStream(\"/font/x12y16pxMaruMonica.ttf\");\n            maruMonica = Font.createFont(Font.TRUETYPE_FONT, is);\n            is = getClass().getResourceAsStream(\"/font/Purisa_Bold.ttf\");\n            purisaB = Font.createFont(Font.TRUETYPE_FONT, is);\n\n            arial_24 = new Font(\"Arial\", Font.PLAIN, gp.tileSize / 2);\n        } catch (FontFormatException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        // CREATE HUD OBJECT\n        SuperObject heart = new OBJ_Heart();\n        heart_empty = heart.image;\n        heart_half = heart.image2;\n        heart_full = heart.image3;\n\n        // CREATE key OBJECT\n        Obj_key = new OBJ_Key();\n        // Check if the images are loaded correctly\n        // System.out.println(\"heart_empty: \" + heart_empty);\n        // System.out.println(\"heart_half: \" + heart_half);\n        // System.out.println(\"heart_full: \" + heart_full);\n    }\n\n    public void draw(Graphics2D g2) {\n        if (gameFinished) {\n\n            g2.setFont(arial_24);\n            g2.setColor(Color.white);\n\n            String text;\n            int textLength;\n            int x, y;\n\n            text = \"You found the treasure\";\n            textLength = (int) g2.getFontMetrics().getStringBounds(text, g2).getWidth();\n            x = gp.getScreenWidth() / 2 - textLength / 2;\n            y = gp.getScreenHeight() / 2 - (gp.tileSize * 3);\n            g2.drawString(text, x, y);\n\n            text = \"You time is :\" + dFormat.format(playTime);\n            textLength = (int) g2.getFontMetrics().getStringBounds(text, g2).getWidth();\n            x = gp.getScreenWidth() / 2 - textLength / 2;\n            y = gp.getScreenHeight() / 2 + (gp.tileSize * 4);\n            g2.drawString(text, x, y);\n\n            g2.setFont(g2.getFont().deriveFont(Font.BOLD, gp.tileSize * 3));\n            g2.setColor(Color.yellow);\n            text = \"Congratulations\";\n            textLength = (int) g2.getFontMetrics().getStringBounds(text, g2).getWidth();\n            x = gp.getScreenWidth() / 2 - textLength / 2;\n            y = gp.getScreenHeight() / 2 + (gp.tileSize * 2);\n            g2.drawString(text, x, y);\n\n            gp.gameThread = null;\n\n        } else {\n            this.g2 = g2;\n            g2.setFont(maruMonica);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(Color.white);\n\n            // TITLE STATE\n            if (gp.gameState == gp.titleState) {\n                drawTitleScreen();\n            }\n            // PLAY STATE\n            if (gp.gameState == gp.playState) {\n                drawPlayerLife();\n                drawPlayerKey();\n\n                // Time\n                playTime += (double) 1 / 60;\n                g2.drawString(\"Time:\" + dFormat.format(playTime), gp.tileSize * 11, gp.tileSize);\n\n                // draw message\n                if (messageOn) {\n                    g2.drawString(message, 10, gp.tileSize * 4);\n                    messageCounter++;\n\n                    if (messageCounter > 120) {\n                        messageCounter = 0;\n                        messageOn = false;\n                    }\n                }\n            }\n            // GAME OVER STATE\n            if(gp.gameState == gp.gameOverState){\n                drawGameOverScreen();\n            }\n        }\n    }\n\n    public void drawPlayerLife() {\n        // Graphics2D g2d = (Graphics2D) gp.getGraphics();\n        // // Check if this method is being called\n        // System.out.println(\"drawPlayerLife is being called\");\n        // // Test if g2 can draw anything\n        // g2d.setColor(Color.RED);\n        // g2d.fillRect(144, 48, 50, 50);\n        // g2d.dispose();\n        int x = 10;\n        int y = 10;\n        int i = 0;\n\n        // DRAW MAX HEART\n        while (i < gp.player.maxLife / 2) {\n            g2.drawImage(heart_empty, x, y, gp.tileSize, gp.tileSize, gp);\n            i++;\n            x += gp.tileSize + 10;\n        }\n\n        // RESET 1\n        x = 10;\n        y = 10;\n        i = 0;\n\n        // DRAW CURRENT LIFE\n        while (i < gp.player.life) {\n            g2.drawImage(heart_half, x, y, gp.tileSize, gp.tileSize, gp);\n            i++;\n            if (i < gp.player.life) {\n                g2.drawImage(heart_full, x, y, gp.tileSize, gp.tileSize, gp);\n            }\n            i++;\n            x += gp.tileSize + 10;\n            // // Check the values of gp.player.life and gp.player.maxLife\n            // System.out.println(\"gp.player.life: \" + gp.player.life);\n            // System.out.println(\"gp.player.maxLife: \" + gp.player.maxLife);\n            // // Check the values of gp.tileSize, x, and y\n            // System.out.println(\"gp.tileSize: \" + gp.tileSize);\n            // System.out.println(\"x: \" + x);\n            // System.out.println(\"y: \" + y);\n        }\n    }\n\n    // draw title menu\n    public void drawTitleScreen() {\n        g2.setColor(new Color(0, 0, 0));\n        g2.fillRect(0, 0, gp.getWidth(), gp.getHeight());\n        // TITLE NAME\n        g2.setFont(g2.getFont().deriveFont(Font.BOLD, 96F));\n        String text = \"Ninja DIE ♡\";\n        int x = getXforCenteredText(text);\n        int y = gp.tileSize * 3;\n\n        // SHADOW COLOR\n        g2.setColor(Color.pink);\n        g2.drawString(text, x + 5, y + 5);\n\n        // MAIN COLOR\n        g2.setColor(Color.white);\n        g2.drawString(text, x, y);\n\n        // NINJA IMAGE\n        x = gp.getScreenWidth() / 2 - ((gp.tileSize / 2) + 30);\n        y = gp.tileSize * 5;\n        g2.drawImage(gp.player.get_down1(), x, y, gp.tileSize * 3, gp.tileSize * 3, null);\n\n        // MENU\n        g2.setFont(g2.getFont().deriveFont(Font.BOLD, 48F));\n        text = \"NEW GAME\";\n        x = getXforCenteredText(text);\n        y += gp.tileSize * 6;\n        g2.drawString(text, x, y);\n        if (commandNum == 0) {\n            g2.drawString(\"☠\", x - gp.tileSize * 2, y);\n        }\n\n        text = \"QUIT\";\n        x = getXforCenteredText(text);\n        y += gp.tileSize * 2;\n        g2.drawString(text, x, y);\n        if (commandNum == 1) {\n            g2.drawString(\"☠\", x - gp.tileSize * 2, y);\n        }\n\n    }\n\n    // get place centered text\n    public int getXforCenteredText(String text) {\n        int length = (int) g2.getFontMetrics().getStringBounds(text, g2).getWidth();\n        int x = gp.getScreenWidth() / 2 - length / 2;\n        return x;\n    }\n\n    // draw key\n    public void drawPlayerKey() {\n        g2.setFont(arial_24);\n        g2.setColor(Color.white);\n        g2.drawString(\" x \" + gp.player.hasKey, gp.tileSize, gp.tileSize * 2 - 10);\n        g2.drawImage(Obj_key.image, 0, gp.tileSize + 10, gp.tileSize, gp.tileSize, null);\n    }\n\n    // message show\n    public void showMessage(String text) {\n        message = text;\n        messageOn = true;\n    }\n\n    public void drawGameOverScreen(){\n        g2.setColor(new Color(107, 0, 119, 231));\n        g2.fillRect(0, 0, gp.getScreenWidth(), gp.getScreenHeight());\n        int x;\n        int y;\n        String text;\n        g2.setFont(g2.getFont().deriveFont(Font.BOLD, 110f));\n        text = \"You Die, Loser <3\";\n        //Shadow\n        g2.setColor(Color.black);\n        x = getXforCenteredText(text);\n        y = gp.tileSize * 4;\n        g2.drawString(text, x, y);\n        //Main\n        g2.setColor(Color.white);\n        g2.drawString(text, x-4, y-4);\n\n        //Retry\n        g2.setFont(g2.getFont().deriveFont(50f));\n        text = \"BACK TO MENU ♡\";\n        x = getXforCenteredText(text);\n        y += gp.tileSize * 4;\n        g2.drawString(text, x, y);\n        if(commandNum == 0){\n            g2.drawString(\"❤\", x-40,y);\n        }\n        //Back to title screen\n        text = \"Quit\";\n        x = getXforCenteredText(text);\n        y += 55;\n        g2.drawString(text, x, y);\n        if(commandNum == 1){\n            g2.drawString(\"❤\", x-40,y);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GamePanel/UI.java b/src/GamePanel/UI.java
--- a/src/GamePanel/UI.java	(revision 90aa2a2dd26d3f63a6382f947c254c8a22f170bd)
+++ b/src/GamePanel/UI.java	(date 1717681927006)
@@ -251,7 +251,7 @@
         g2.setColor(Color.white);
         g2.drawString(text, x-4, y-4);
 
-        //Retry
+        //Menu
         g2.setFont(g2.getFont().deriveFont(50f));
         text = "BACK TO MENU ♡";
         x = getXforCenteredText(text);
@@ -260,7 +260,7 @@
         if(commandNum == 0){
             g2.drawString("❤", x-40,y);
         }
-        //Back to title screen
+        //Quit
         text = "Quit";
         x = getXforCenteredText(text);
         y += 55;
Index: src/Entity/ENinja.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Entity;\n\nimport GamePanel.MyPanel;\n\nimport java.awt.*;\n\nimport java.util.Random;\n\npublic class ENinja extends Entity {\n    public ENinja(MyPanel mp) {\n        super(mp);\n        type = 1;\n        name = \"ENinja\";\n        set_speed(1);\n        maxLife = 1;\n        life = maxLife;\n        solidArea = new Rectangle();\n        solidArea.x = 12;\n        solidArea.y = 20;\n        solidAreaDefaultX = solidArea.x;\n        solidAreaDefaultY = solidArea.y;\n        solidArea.width = 24;\n        solidArea.height = 28;\n        set_direction(\"down\");\n\n        getImage();\n    }\n\n    public void getImage() {\n        set_up1(setup(\"/Enemy/ninja2_up_1.png\"));\n        set_up2(setup(\"/Enemy/ninja2_up_2.png\"));\n        set_down1(setup(\"/Enemy/ninja2_down_1.png\"));\n        set_down2(setup(\"/Enemy/ninja2_down_2.png\"));\n        set_left1(setup(\"/Enemy/ninja2_left_1.png\"));\n        set_left2(setup(\"/Enemy/ninja2_left_2.png\"));\n        set_right1(setup(\"/Enemy/ninja2_right_1.png\"));\n        set_right2(setup(\"/Enemy/ninja2_right_2.png\"));\n    }\n\n    @Override\n    public void setAction() {\n        // int xDistance = Math.abs(worldX - mp.player.worldX);\n        // int yDistance = Math.abs(worldY - mp.player.worldY);\n        // int tileDistance = (xDistance + yDistance) / mp.tileSize;\n        if (onPath == true) {\n            // check if it stops chasing\n            checkStopChasingOrNot(mp.player, 15, 100);\n            // if (tileDistance > 20) {\n            // onPath = false;\n            // }\n            // search the direction to go\n            // int goalCol = (mp.player.worldX + mp.player.solidArea.x)/mp.tileSize;\n            // int goalRow = (mp.player.worldY + mp.player.solidArea.y)/mp.tileSize;\n            searchPath(getGoalCol(mp.player), getGoalRow(mp.player));\n\n        } else {\n            // check if it starts chasing\n            checkStartChasingOrNot(mp.player, 5, 100);\n            // if(onPath == true && tileDistance > 20){\n            // onPath = false;\n            // Get a random direction\n            getRandomDirection();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Entity/ENinja.java b/src/Entity/ENinja.java
--- a/src/Entity/ENinja.java	(revision 90aa2a2dd26d3f63a6382f947c254c8a22f170bd)
+++ b/src/Entity/ENinja.java	(date 1717683694273)
@@ -44,7 +44,7 @@
         // int tileDistance = (xDistance + yDistance) / mp.tileSize;
         if (onPath == true) {
             // check if it stops chasing
-            checkStopChasingOrNot(mp.player, 15, 100);
+            checkStopChasingOrNot(mp.player, 20, 100);
             // if (tileDistance > 20) {
             // onPath = false;
             // }
@@ -55,7 +55,7 @@
 
         } else {
             // check if it starts chasing
-            checkStartChasingOrNot(mp.player, 5, 100);
+            checkStartChasingOrNot(mp.player, 20, 100);
             // if(onPath == true && tileDistance > 20){
             // onPath = false;
             // Get a random direction
